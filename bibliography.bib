
@article{jung_rustbelt_2018,
	title = {{RustBelt}: securing the foundations of the {Rust} programming language},
	volume = {2},
	issn = {2475-1421},
	shorttitle = {{RustBelt}},
	url = {https://dl.acm.org/doi/10.1145/3158154},
	doi = {10.1145/3158154},
	abstract = {Rust is a new systems programming language that promises to overcome the seemingly fundamental tradeoff between high-level safety guarantees and low-level control over resource management. Unfortunately, none of Rust's safety claims have been formally proven, and there is good reason to question whether they actually hold. Specifically, Rust employs a strong, ownership-based type system, but then extends the expressive power of this core type system through libraries that internally use unsafe features. In this paper, we give the first formal (and machine-checked) safety proof for a language representing a realistic subset of Rust. Our proof is extensible in the sense that, for each new Rust library that uses unsafe features, we can say what verification condition it must satisfy in order for it to be deemed a safe extension to the language. We have carried out this verification for some of the most important libraries that are used throughout the Rust ecosystem.},
	language = {en},
	number = {POPL},
	urldate = {2025-03-05},
	journal = {Proceedings of the ACM on Programming Languages},
	author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
	month = jan,
	year = {2018},
	pages = {1--34},
	file = {Full Text PDF:/home/hdomroes/Zotero/storage/ELWJWCM2/Jung et al. - 2018 - RustBelt securing the foundations of the Rust programming language.pdf:application/pdf},
}

@inproceedings{layzell_supporting_2000,
	title = {Supporting collaboration in distributed software engineering teams},
	url = {https://ieeexplore.ieee.org/document/896681/?arnumber=896681},
	doi = {10.1109/APSEC.2000.896681},
	abstract = {Software engineering is no longer the preserve of individuals but is essentially a team-based activity involving a wide variety of stakeholders and thus making the need for communication and co-operation an inherent characteristic. Changes in support technology, economic factors and globalisation of the software process is resulting in the geographical separation of personnel. Where such distribution of personnel occurs, it is clear that the quality of the project will be dependent upon the degree of effective communication and co-operation. This paper presents the results from a study of communication and co-operation practices on a range of distributed software projects from an industrial and educational context. It analyses the advantages and disadvantages of distributed software engineering teams and presents the lessons learned from these studies, including team structure, project management, communication and procedures.},
	urldate = {2025-03-13},
	booktitle = {Proceedings {Seventh} {Asia}-{Pacific} {Software} {Engeering} {Conference}. {APSEC} 2000},
	author = {Layzell, P. and Brereton, O.P. and French, A.},
	month = dec,
	year = {2000},
	note = {ISSN: 1530-1362},
	keywords = {Collaborative software, Communication effectiveness, Communication industry, Computer industry, Context, Economics, Globalization, Personnel, Project management, Software engineering},
	pages = {38--45},
	file = {Full Text PDF:/home/hdomroes/Zotero/storage/PL78S9ZW/Layzell et al. - 2000 - Supporting collaboration in distributed software engineering teams.pdf:application/pdf;IEEE Xplore Abstract Record:/home/hdomroes/Zotero/storage/9TPEKG44/896681.html:text/html},
}

@article{garcia_improving_nodate,
	title = {Improving firmware development through the {Rust} {Programming} {Language}},
	language = {en},
	author = {García, Miguel Pérez and Sánchez, Diego Antonio Mejía},
	file = {PDF:/home/hdomroes/Zotero/storage/UEGWQJA4/García and Sánchez - ESPECIALISTA EN SISTEMAS EMBEBIDOS.pdf:application/pdf},
}

@article{sudwoj_rust_2020,
	title = {Rust programming language in the high-performance computing environment},
	copyright = {http://rightsstatements.org/page/InC-NC/1.0/, info:eu-repo/semantics/openAccess},
	url = {http://hdl.handle.net/20.500.11850/474922},
	doi = {10.3929/ETHZ-B-000474922},
	language = {en},
	urldate = {2025-03-13},
	author = {Sudwoj, Michal},
	collaborator = {{Käppeli, Roger}},
	month = sep,
	year = {2020},
	note = {Artwork Size: 62 p.
Medium: application/pdf
Publisher: ETH Zurich},
	keywords = {C++, Fortran, high-performance computing, Rust},
	pages = {62 p.},
	annote = {Other
Fortran and C++ have traditionally been the languages of choice for high-performance computing (HPC) applications. However, they are both over 35 years old, and do not offer much in terms of user-friendliness or memory safety. Rust is an emergent new systems language, aiming to be performant while offering such safety and usability, as well as bundling tools that a modern developer needs.

We compare multiple implementations of a finite difference stencil code, and show that idiomatically written Rust programs can be just as performant as their Fortran or C++ counterparts, while offering the above-mentioned advantages.},
	file = {PDF:/home/hdomroes/Zotero/storage/VHZR5GIV/Sudwoj - 2020 - Rust programming language in the high-performance computing environment.pdf:application/pdf},
}

@inproceedings{cui_is_2024,
	address = {Lisbon Portugal},
	title = {Is unsafe an {Achilles}' {Heel}? {A} {Comprehensive} {Study} of {Safety} {Requirements} in {Unsafe} {Rust} {Programming}},
	isbn = {979-8-4007-0217-4},
	shorttitle = {Is unsafe an {Achilles}' {Heel}?},
	url = {https://dl.acm.org/doi/10.1145/3597503.3639136},
	doi = {10.1145/3597503.3639136},
	language = {en},
	urldate = {2025-03-13},
	booktitle = {Proceedings of the {IEEE}/{ACM} 46th {International} {Conference} on {Software} {Engineering}},
	publisher = {ACM},
	author = {Cui, Mohan and Sun, Shuran and Xu, Hui and Zhou, Yangfan},
	month = apr,
	year = {2024},
	pages = {1--13},
	file = {Full Text PDF:/home/hdomroes/Zotero/storage/QP4SDUTI/Cui et al. - 2024 - Is unsafe an Achilles' Heel A Comprehensive Study of Safety Requirements in Unsafe Rust Programming.pdf:application/pdf},
}

@misc{rust_docs,
	title = {The {Rust} {Programming} {Language} - {The} {Rust} {Programming} {Language}},
	url = {https://doc.rust-lang.org/book/},
	urldate = {2025-03-24},
	file = {The Rust Programming Language - The Rust Programming Language:/home/hdomroes/Zotero/storage/CBD9NKJT/book.html:text/html},
}

@misc{rstest,
	title = {rstest},
	copyright = {Apache-2.0},
	url = {https://github.com/la10736/rstest},
	abstract = {Fixture-based test framework for Rust},
	urldate = {2025-03-31},
	author = {d'Amico, Michele},
	month = mar,
	year = {2025},
	note = {original-date: 2018-03-11T21:46:36Z},
	keywords = {rust, test-framework, testing, testing-tools},
}

@misc{crates.io,
	title = {crates.io: {Rust} {Package} {Registry}},
	shorttitle = {crates.io},
	url = {https://crates.io/},
	abstract = {cargo is the package manager and crate host for rust},
	language = {en},
	urldate = {2025-04-03},
	file = {Snapshot:/home/hdomroes/Zotero/storage/5D6S6VVV/crates.io.html:text/html},
}

@misc{lambda_def_env,
	title = {Understanding the {Lambda} execution environment lifecycle - {AWS} {Lambda}},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtime-environment.html},
	urldate = {2025-04-06},
	file = {Understanding the Lambda execution environment lifecycle - AWS Lambda:/home/hdomroes/Zotero/storage/XXEYKS9P/lambda-runtime-environment.html:text/html},
}

@misc{lambda_def,
	title = {What is {AWS} {Lambda}? - {AWS} {Lambda}},
	url = {https://docs.aws.amazon.com/lambda/latest/dg/welcome.html},
	urldate = {2025-04-06},
	file = {What is AWS Lambda? - AWS Lambda:/home/hdomroes/Zotero/storage/S27KQTK9/welcome.html:text/html},
}

@misc{code_cov,
	title = {What is {Code} {Coverage}?},
	url = {https://www.atlassian.com/continuous-delivery/software-testing/code-coverage},
	abstract = {Code coverage is a metric that helps you understand how much of your source is tested. Learn how it is calculated \&amp; how to get started with your projects.},
	language = {en},
	urldate = {2025-04-06},
	journal = {Atlassian},
	author = {Atlassian},
	file = {Snapshot:/home/hdomroes/Zotero/storage/ZMI2KSH6/code-coverage.html:text/html},
}

@misc{nextest,
	title = {Test coverage - cargo-nextest},
	url = {https://nexte.st/docs/integrations/test-coverage/},
	abstract = {A next-generation test runner for Rust.},
	language = {en},
	urldate = {2025-04-06},
	file = {Snapshot:/home/hdomroes/Zotero/storage/S6E9GR3T/test-coverage.html:text/html},
}


@misc{llvm-cov,
	title = {taiki-e/cargo-llvm-cov},
	copyright = {Apache-2.0},
	url = {https://github.com/taiki-e/cargo-llvm-cov},
	abstract = {Cargo subcommand to easily use LLVM source-based code coverage (-C instrument-coverage).},
	urldate = {2025-04-06},
	author = {Endo, Taiki},
	month = apr,
	year = {2025},
	note = {original-date: 2021-01-16T16:59:06Z},
	keywords = {cargo, cli, coverage, rust},
}


@misc{step_function,
	title = {What is {Step} {Functions}? - {AWS} {Step} {Functions}},
	url = {https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html},
	urldate = {2025-04-07},
	file = {What is Step Functions? - AWS Step Functions:/home/hdomroes/Zotero/storage/FXTZBHMB/welcome.html:text/html},
}